{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Data Preparation for Analysis\n",
    "* parse ABSA data with semantic dependencies\n",
    "* parse ABSA data with syntactic dependencies\n",
    "* prepare data structure for graph (use `mtool`'s Graph) and support graph visualization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [],
   "source": [
    "import sys, os, json \n",
    "from typing import List, Any, Dict, Callable, Iterable\n",
    "from IPython.display import HTML, display\n",
    "import tabulate\n",
    "\n",
    "# root of project in nlp-architext repo\n",
    "libert_dir = \"/data/home/ayalklei/nlp-architect/nlp_architect/models/libert\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [],
   "source": [
    "# at first we used the jsonl files, BUT these jsonl files are before applying any tokenization. \n",
    "# Alternatively, let's take the raw text from the conll-like formatted ABSA data, \n",
    "# so that the parsed data will be with consistent tokenization as the ABSA data\n",
    "conll_data_dir = f\"{libert_dir}/data/conll/domains_all\"\n",
    "rest_source_file = f\"{conll_data_dir}/restaurants.txt\"\n",
    "laptops_source_file = f\"{conll_data_dir}/laptops.txt\"\n",
    "\n",
    "\"\"\"\n",
    "Extract raw sentences files from conll files - sentence per block, delimited by empty line\n",
    "\"\"\"\n",
    "def extract_raw(src_fn: str, output_fn: str):\n",
    "    sents = []\n",
    "    current_sentence = []\n",
    "    with open(src_fn) as fin:\n",
    "        for line in fin:\n",
    "            if line.rstrip():\n",
    "                token = line.rstrip().split()[0]\n",
    "                current_sentence.append(token)\n",
    "            else:\n",
    "                sents.append(' '.join(current_sentence) + \"\\n\")\n",
    "                current_sentence = []\n",
    "    # write raw sents\n",
    "    with open(output_fn, \"w\") as fout:\n",
    "        fout.writelines(sents)\n",
    "\n",
    "# apply extract_raw for the domains restaurants and laptops\n",
    "extract_raw(rest_source_file, f\"{libert_dir}/analysis/raw_sentences/restaurants.txt\")\n",
    "extract_raw(laptops_source_file, f\"{libert_dir}/analysis/raw_sentences/laptops.txt\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "# for device domain, sentences are already in raw format in $libert_dir/data/Wang2018/addsenti_device.txt,\n",
    "# but need to clean each sentence from the suffix (starting with '##') stating the opinion terms\n",
    "orig_device_raw_sentences_fn = f\"{libert_dir}/data/Wang2018/addsenti_device.txt\"\n",
    "target_device_raw_sentences_fn = f\"{libert_dir}/analysis/raw_sentences/device.txt\" \n",
    "lines = []\n",
    "with open(orig_device_raw_sentences_fn) as fin:\n",
    "    for line in fin:\n",
    "        if \"##\" in line:\n",
    "            line = line.split(\"##\")[0] + \"\\n\"\n",
    "        lines.append(line)\n",
    "with open(target_device_raw_sentences_fn, \"w\") as fout:\n",
    "    fout.writelines(lines)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "# prepare allennlp-fit inputs files (jsonl files) for HIT-SCIR parser\n",
    "def prepare_allennlp_predictor_input(raw_fn: str, out_fn: str):\n",
    "    with open(raw_fn) as fin:\n",
    "        lines = [json.dumps({\"sentence\": s.rstrip(), \"id\":f\"{i:04}\"}) + \"\\n\" for i,s in enumerate(fin)]\n",
    "    with open(out_fn, \"w\") as fout:\n",
    "        fout.writelines(lines)\n",
    "\n",
    "domains = [\"restaurants\", \"laptops\", \"device\"]\n",
    "for domain in domains:\n",
    "    prepare_allennlp_predictor_input(\n",
    "        f\"{libert_dir}/analysis/raw_sentences/{domain}.txt\", \n",
    "        f\"{libert_dir}/analysis/input_for_allennlp/{domain}.jsonl\")\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Run HIT-SCIR parser\n",
    "Use the following fish-shell command from the HIT-SCIR directory:\n",
    "```fish\n",
    "for frlsm in dm psd; for domain in restaurants laptops device; allennlp predict --output-file $libert_dir/analysis/HIT-SCIR-parses/$frlsm-$domain-output.mrp --predictor transition_predictor_sdp --include-package utils --include-package modules --batch-size 32  HIT-SCIR-CoNLL2019-model/$frlsm $libert_dir/analysis/input_for_allennlp/$domain.jsonl; end; end;\n",
    "```"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "tags": []
   },
   "source": [
    "## SDP Visualization\n",
    "\n",
    "We use the [MRP](http://mrp.nlpl.eu/2019/) data format, and leverage [mtool](https://github.com/cfmrp/mtool) for format-conversions and visualizations. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<span class=\"tex2jax_ignore\"><svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" xml:lang=\"en\" id=\"b88688cfb9d041ea9c4f13da99fd01e7-0\" class=\"displacy\" width=\"1050\" height=\"337.0\" direction=\"ltr\" style=\"max-width: none; height: 337.0px; color: #000000; background: #ffffff; font-family: Arial; direction: ltr\">\n",
       "<text class=\"displacy-token\" fill=\"currentColor\" text-anchor=\"middle\" y=\"247.0\">\n",
       "    <tspan class=\"displacy-word\" fill=\"currentColor\" x=\"50\"></tspan>\n",
       "    <tspan class=\"displacy-tag\" dy=\"2em\" fill=\"currentColor\" x=\"50\"></tspan>\n",
       "</text>\n",
       "\n",
       "<text class=\"displacy-token\" fill=\"currentColor\" text-anchor=\"middle\" y=\"247.0\">\n",
       "    <tspan class=\"displacy-word\" fill=\"currentColor\" x=\"150\">But</tspan>\n",
       "    <tspan class=\"displacy-tag\" dy=\"2em\" fill=\"currentColor\" x=\"150\"></tspan>\n",
       "</text>\n",
       "\n",
       "<text class=\"displacy-token\" fill=\"currentColor\" text-anchor=\"middle\" y=\"247.0\">\n",
       "    <tspan class=\"displacy-word\" fill=\"currentColor\" x=\"250\">the</tspan>\n",
       "    <tspan class=\"displacy-tag\" dy=\"2em\" fill=\"currentColor\" x=\"250\"></tspan>\n",
       "</text>\n",
       "\n",
       "<text class=\"displacy-token\" fill=\"currentColor\" text-anchor=\"middle\" y=\"247.0\">\n",
       "    <tspan class=\"displacy-word\" fill=\"currentColor\" x=\"350\">staff</tspan>\n",
       "    <tspan class=\"displacy-tag\" dy=\"2em\" fill=\"currentColor\" x=\"350\"></tspan>\n",
       "</text>\n",
       "\n",
       "<text class=\"displacy-token\" fill=\"currentColor\" text-anchor=\"middle\" y=\"247.0\">\n",
       "    <tspan class=\"displacy-word\" fill=\"currentColor\" x=\"450\">was</tspan>\n",
       "    <tspan class=\"displacy-tag\" dy=\"2em\" fill=\"currentColor\" x=\"450\"></tspan>\n",
       "</text>\n",
       "\n",
       "<text class=\"displacy-token\" fill=\"currentColor\" text-anchor=\"middle\" y=\"247.0\">\n",
       "    <tspan class=\"displacy-word\" fill=\"currentColor\" x=\"550\">so</tspan>\n",
       "    <tspan class=\"displacy-tag\" dy=\"2em\" fill=\"currentColor\" x=\"550\"></tspan>\n",
       "</text>\n",
       "\n",
       "<text class=\"displacy-token\" fill=\"currentColor\" text-anchor=\"middle\" y=\"247.0\">\n",
       "    <tspan class=\"displacy-word\" fill=\"currentColor\" x=\"650\">horrible</tspan>\n",
       "    <tspan class=\"displacy-tag\" dy=\"2em\" fill=\"currentColor\" x=\"650\"></tspan>\n",
       "</text>\n",
       "\n",
       "<text class=\"displacy-token\" fill=\"currentColor\" text-anchor=\"middle\" y=\"247.0\">\n",
       "    <tspan class=\"displacy-word\" fill=\"currentColor\" x=\"750\">to</tspan>\n",
       "    <tspan class=\"displacy-tag\" dy=\"2em\" fill=\"currentColor\" x=\"750\"></tspan>\n",
       "</text>\n",
       "\n",
       "<text class=\"displacy-token\" fill=\"currentColor\" text-anchor=\"middle\" y=\"247.0\">\n",
       "    <tspan class=\"displacy-word\" fill=\"currentColor\" x=\"850\">us</tspan>\n",
       "    <tspan class=\"displacy-tag\" dy=\"2em\" fill=\"currentColor\" x=\"850\"></tspan>\n",
       "</text>\n",
       "\n",
       "<text class=\"displacy-token\" fill=\"currentColor\" text-anchor=\"middle\" y=\"247.0\">\n",
       "    <tspan class=\"displacy-word\" fill=\"currentColor\" x=\"950\">.</tspan>\n",
       "    <tspan class=\"displacy-tag\" dy=\"2em\" fill=\"currentColor\" x=\"950\"></tspan>\n",
       "</text>\n",
       "\n",
       "<g class=\"displacy-arrow\">\n",
       "    <path class=\"displacy-arc\" id=\"arrow-b88688cfb9d041ea9c4f13da99fd01e7-0-0\" stroke-width=\"2px\" d=\"M562,202.0 562,185.33333333333334 641.0,185.33333333333334 641.0,202.0\" fill=\"none\" stroke=\"currentColor\"/>\n",
       "    <text dy=\"1.25em\" style=\"font-size: 0.8em; letter-spacing: 1px\">\n",
       "        <textPath xlink:href=\"#arrow-b88688cfb9d041ea9c4f13da99fd01e7-0-0\" class=\"displacy-label\" startOffset=\"50%\" side=\"left\" fill=\"currentColor\" text-anchor=\"middle\">advmod</textPath>\n",
       "    </text>\n",
       "    <path class=\"displacy-arrowhead\" d=\"M562,204.0 L558,196.0 566,196.0\" fill=\"currentColor\"/>\n",
       "</g>\n",
       "\n",
       "<g class=\"displacy-arrow\">\n",
       "    <path class=\"displacy-arc\" id=\"arrow-b88688cfb9d041ea9c4f13da99fd01e7-0-1\" stroke-width=\"2px\" d=\"M462,202.0 462,135.33333333333331 950.0,135.33333333333331 950.0,202.0\" fill=\"none\" stroke=\"currentColor\"/>\n",
       "    <text dy=\"1.25em\" style=\"font-size: 0.8em; letter-spacing: 1px\">\n",
       "        <textPath xlink:href=\"#arrow-b88688cfb9d041ea9c4f13da99fd01e7-0-1\" class=\"displacy-label\" startOffset=\"50%\" side=\"left\" fill=\"currentColor\" text-anchor=\"middle\">punct</textPath>\n",
       "    </text>\n",
       "    <path class=\"displacy-arrowhead\" d=\"M950.0,204.0 L954.0,196.0 946.0,196.0\" fill=\"currentColor\"/>\n",
       "</g>\n",
       "\n",
       "<g class=\"displacy-arrow\">\n",
       "    <path class=\"displacy-arc\" id=\"arrow-b88688cfb9d041ea9c4f13da99fd01e7-0-2\" stroke-width=\"2px\" d=\"M362,202.0 362,185.33333333333334 441.0,185.33333333333334 441.0,202.0\" fill=\"none\" stroke=\"currentColor\"/>\n",
       "    <text dy=\"1.25em\" style=\"font-size: 0.8em; letter-spacing: 1px\">\n",
       "        <textPath xlink:href=\"#arrow-b88688cfb9d041ea9c4f13da99fd01e7-0-2\" class=\"displacy-label\" startOffset=\"50%\" side=\"left\" fill=\"currentColor\" text-anchor=\"middle\">nsubj</textPath>\n",
       "    </text>\n",
       "    <path class=\"displacy-arrowhead\" d=\"M362,204.0 L358,196.0 366,196.0\" fill=\"currentColor\"/>\n",
       "</g>\n",
       "\n",
       "<g class=\"displacy-arrow\">\n",
       "    <path class=\"displacy-arc\" id=\"arrow-b88688cfb9d041ea9c4f13da99fd01e7-0-3\" stroke-width=\"2px\" d=\"M262,202.0 262,185.33333333333334 341.0,185.33333333333334 341.0,202.0\" fill=\"none\" stroke=\"currentColor\"/>\n",
       "    <text dy=\"1.25em\" style=\"font-size: 0.8em; letter-spacing: 1px\">\n",
       "        <textPath xlink:href=\"#arrow-b88688cfb9d041ea9c4f13da99fd01e7-0-3\" class=\"displacy-label\" startOffset=\"50%\" side=\"left\" fill=\"currentColor\" text-anchor=\"middle\">det</textPath>\n",
       "    </text>\n",
       "    <path class=\"displacy-arrowhead\" d=\"M262,204.0 L258,196.0 266,196.0\" fill=\"currentColor\"/>\n",
       "</g>\n",
       "\n",
       "<g class=\"displacy-arrow\">\n",
       "    <path class=\"displacy-arc\" id=\"arrow-b88688cfb9d041ea9c4f13da99fd01e7-0-4\" stroke-width=\"2px\" d=\"M762,202.0 762,185.33333333333334 841.0,185.33333333333334 841.0,202.0\" fill=\"none\" stroke=\"currentColor\"/>\n",
       "    <text dy=\"1.25em\" style=\"font-size: 0.8em; letter-spacing: 1px\">\n",
       "        <textPath xlink:href=\"#arrow-b88688cfb9d041ea9c4f13da99fd01e7-0-4\" class=\"displacy-label\" startOffset=\"50%\" side=\"left\" fill=\"currentColor\" text-anchor=\"middle\">pobj</textPath>\n",
       "    </text>\n",
       "    <path class=\"displacy-arrowhead\" d=\"M841.0,204.0 L845.0,196.0 837.0,196.0\" fill=\"currentColor\"/>\n",
       "</g>\n",
       "\n",
       "<g class=\"displacy-arrow\">\n",
       "    <path class=\"displacy-arc\" id=\"arrow-b88688cfb9d041ea9c4f13da99fd01e7-0-5\" stroke-width=\"2px\" d=\"M462,202.0 462,168.66666666666666 644.0,168.66666666666666 644.0,202.0\" fill=\"none\" stroke=\"currentColor\"/>\n",
       "    <text dy=\"1.25em\" style=\"font-size: 0.8em; letter-spacing: 1px\">\n",
       "        <textPath xlink:href=\"#arrow-b88688cfb9d041ea9c4f13da99fd01e7-0-5\" class=\"displacy-label\" startOffset=\"50%\" side=\"left\" fill=\"currentColor\" text-anchor=\"middle\">acomp</textPath>\n",
       "    </text>\n",
       "    <path class=\"displacy-arrowhead\" d=\"M644.0,204.0 L648.0,196.0 640.0,196.0\" fill=\"currentColor\"/>\n",
       "</g>\n",
       "\n",
       "<g class=\"displacy-arrow\">\n",
       "    <path class=\"displacy-arc\" id=\"arrow-b88688cfb9d041ea9c4f13da99fd01e7-0-6\" stroke-width=\"2px\" d=\"M662,202.0 662,185.33333333333334 741.0,185.33333333333334 741.0,202.0\" fill=\"none\" stroke=\"currentColor\"/>\n",
       "    <text dy=\"1.25em\" style=\"font-size: 0.8em; letter-spacing: 1px\">\n",
       "        <textPath xlink:href=\"#arrow-b88688cfb9d041ea9c4f13da99fd01e7-0-6\" class=\"displacy-label\" startOffset=\"50%\" side=\"left\" fill=\"currentColor\" text-anchor=\"middle\">prep</textPath>\n",
       "    </text>\n",
       "    <path class=\"displacy-arrowhead\" d=\"M741.0,204.0 L745.0,196.0 737.0,196.0\" fill=\"currentColor\"/>\n",
       "</g>\n",
       "\n",
       "<g class=\"displacy-arrow\">\n",
       "    <path class=\"displacy-arc\" id=\"arrow-b88688cfb9d041ea9c4f13da99fd01e7-0-7\" stroke-width=\"2px\" d=\"M162,202.0 162,152.0 447.0,152.0 447.0,202.0\" fill=\"none\" stroke=\"currentColor\"/>\n",
       "    <text dy=\"1.25em\" style=\"font-size: 0.8em; letter-spacing: 1px\">\n",
       "        <textPath xlink:href=\"#arrow-b88688cfb9d041ea9c4f13da99fd01e7-0-7\" class=\"displacy-label\" startOffset=\"50%\" side=\"left\" fill=\"currentColor\" text-anchor=\"middle\">cc</textPath>\n",
       "    </text>\n",
       "    <path class=\"displacy-arrowhead\" d=\"M162,204.0 L158,196.0 166,196.0\" fill=\"currentColor\"/>\n",
       "</g>\n",
       "</svg></span>"
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<span class=\"tex2jax_ignore\"><svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" xml:lang=\"en\" id=\"544ddc59fbe34a109705cb1a22a9362b-0\" class=\"displacy\" width=\"950\" height=\"337.0\" direction=\"ltr\" style=\"max-width: none; height: 337.0px; color: #000000; background: #ffffff; font-family: Arial; direction: ltr\">\n",
       "<text class=\"displacy-token\" fill=\"currentColor\" text-anchor=\"middle\" y=\"247.0\">\n",
       "    <tspan class=\"displacy-word\" fill=\"currentColor\" x=\"50\">but</tspan>\n",
       "    <tspan class=\"displacy-tag\" dy=\"2em\" fill=\"currentColor\" x=\"50\"></tspan>\n",
       "</text>\n",
       "\n",
       "<text class=\"displacy-token\" fill=\"currentColor\" text-anchor=\"middle\" y=\"247.0\">\n",
       "    <tspan class=\"displacy-word\" fill=\"currentColor\" x=\"150\">the</tspan>\n",
       "    <tspan class=\"displacy-tag\" dy=\"2em\" fill=\"currentColor\" x=\"150\"></tspan>\n",
       "</text>\n",
       "\n",
       "<text class=\"displacy-token\" fill=\"currentColor\" text-anchor=\"middle\" y=\"247.0\">\n",
       "    <tspan class=\"displacy-word\" fill=\"currentColor\" x=\"250\">staff</tspan>\n",
       "    <tspan class=\"displacy-tag\" dy=\"2em\" fill=\"currentColor\" x=\"250\"></tspan>\n",
       "</text>\n",
       "\n",
       "<text class=\"displacy-token\" fill=\"currentColor\" text-anchor=\"middle\" y=\"247.0\">\n",
       "    <tspan class=\"displacy-word\" fill=\"currentColor\" x=\"350\">was</tspan>\n",
       "    <tspan class=\"displacy-tag\" dy=\"2em\" fill=\"currentColor\" x=\"350\"></tspan>\n",
       "</text>\n",
       "\n",
       "<text class=\"displacy-token\" fill=\"currentColor\" text-anchor=\"middle\" y=\"247.0\">\n",
       "    <tspan class=\"displacy-word\" fill=\"currentColor\" x=\"450\">so</tspan>\n",
       "    <tspan class=\"displacy-tag\" dy=\"2em\" fill=\"currentColor\" x=\"450\"></tspan>\n",
       "</text>\n",
       "\n",
       "<text class=\"displacy-token\" fill=\"currentColor\" text-anchor=\"middle\" y=\"247.0\">\n",
       "    <tspan class=\"displacy-word\" fill=\"currentColor\" x=\"550\">horrible</tspan>\n",
       "    <tspan class=\"displacy-tag\" dy=\"2em\" fill=\"currentColor\" x=\"550\"></tspan>\n",
       "</text>\n",
       "\n",
       "<text class=\"displacy-token\" fill=\"currentColor\" text-anchor=\"middle\" y=\"247.0\">\n",
       "    <tspan class=\"displacy-word\" fill=\"currentColor\" x=\"650\">to</tspan>\n",
       "    <tspan class=\"displacy-tag\" dy=\"2em\" fill=\"currentColor\" x=\"650\"></tspan>\n",
       "</text>\n",
       "\n",
       "<text class=\"displacy-token\" fill=\"currentColor\" text-anchor=\"middle\" y=\"247.0\">\n",
       "    <tspan class=\"displacy-word\" fill=\"currentColor\" x=\"750\">us</tspan>\n",
       "    <tspan class=\"displacy-tag\" dy=\"2em\" fill=\"currentColor\" x=\"750\"></tspan>\n",
       "</text>\n",
       "\n",
       "<text class=\"displacy-token\" fill=\"currentColor\" text-anchor=\"middle\" y=\"247.0\">\n",
       "    <tspan class=\"displacy-word\" fill=\"currentColor\" x=\"850\">non</tspan>\n",
       "    <tspan class=\"displacy-tag\" dy=\"2em\" fill=\"currentColor\" x=\"850\"></tspan>\n",
       "</text>\n",
       "\n",
       "<g class=\"displacy-arrow\">\n",
       "    <path class=\"displacy-arc\" id=\"arrow-544ddc59fbe34a109705cb1a22a9362b-0-0\" stroke-width=\"2px\" d=\"M62,202.0 62,135.33333333333331 550.0,135.33333333333331 550.0,202.0\" fill=\"none\" stroke=\"currentColor\"/>\n",
       "    <text dy=\"1.25em\" style=\"font-size: 0.8em; letter-spacing: 1px\">\n",
       "        <textPath xlink:href=\"#arrow-544ddc59fbe34a109705cb1a22a9362b-0-0\" class=\"displacy-label\" startOffset=\"50%\" side=\"left\" fill=\"currentColor\" text-anchor=\"middle\">ARG2</textPath>\n",
       "    </text>\n",
       "    <path class=\"displacy-arrowhead\" d=\"M550.0,204.0 L554.0,196.0 546.0,196.0\" fill=\"currentColor\"/>\n",
       "</g>\n",
       "\n",
       "<g class=\"displacy-arrow\">\n",
       "    <path class=\"displacy-arc\" id=\"arrow-544ddc59fbe34a109705cb1a22a9362b-0-1\" stroke-width=\"2px\" d=\"M462,202.0 462,185.33333333333334 541.0,185.33333333333334 541.0,202.0\" fill=\"none\" stroke=\"currentColor\"/>\n",
       "    <text dy=\"1.25em\" style=\"font-size: 0.8em; letter-spacing: 1px\">\n",
       "        <textPath xlink:href=\"#arrow-544ddc59fbe34a109705cb1a22a9362b-0-1\" class=\"displacy-label\" startOffset=\"50%\" side=\"left\" fill=\"currentColor\" text-anchor=\"middle\">comp_so</textPath>\n",
       "    </text>\n",
       "    <path class=\"displacy-arrowhead\" d=\"M541.0,204.0 L545.0,196.0 537.0,196.0\" fill=\"currentColor\"/>\n",
       "</g>\n",
       "\n",
       "<g class=\"displacy-arrow\">\n",
       "    <path class=\"displacy-arc\" id=\"arrow-544ddc59fbe34a109705cb1a22a9362b-0-2\" stroke-width=\"2px\" d=\"M262,202.0 262,152.0 547.0,152.0 547.0,202.0\" fill=\"none\" stroke=\"currentColor\"/>\n",
       "    <text dy=\"1.25em\" style=\"font-size: 0.8em; letter-spacing: 1px\">\n",
       "        <textPath xlink:href=\"#arrow-544ddc59fbe34a109705cb1a22a9362b-0-2\" class=\"displacy-label\" startOffset=\"50%\" side=\"left\" fill=\"currentColor\" text-anchor=\"middle\">ARG1</textPath>\n",
       "    </text>\n",
       "    <path class=\"displacy-arrowhead\" d=\"M262,204.0 L258,196.0 266,196.0\" fill=\"currentColor\"/>\n",
       "</g>\n",
       "\n",
       "<g class=\"displacy-arrow\">\n",
       "    <path class=\"displacy-arc\" id=\"arrow-544ddc59fbe34a109705cb1a22a9362b-0-3\" stroke-width=\"2px\" d=\"M162,202.0 162,185.33333333333334 241.0,185.33333333333334 241.0,202.0\" fill=\"none\" stroke=\"currentColor\"/>\n",
       "    <text dy=\"1.25em\" style=\"font-size: 0.8em; letter-spacing: 1px\">\n",
       "        <textPath xlink:href=\"#arrow-544ddc59fbe34a109705cb1a22a9362b-0-3\" class=\"displacy-label\" startOffset=\"50%\" side=\"left\" fill=\"currentColor\" text-anchor=\"middle\">BV</textPath>\n",
       "    </text>\n",
       "    <path class=\"displacy-arrowhead\" d=\"M241.0,204.0 L245.0,196.0 237.0,196.0\" fill=\"currentColor\"/>\n",
       "</g>\n",
       "\n",
       "<g class=\"displacy-arrow\">\n",
       "    <path class=\"displacy-arc\" id=\"arrow-544ddc59fbe34a109705cb1a22a9362b-0-4\" stroke-width=\"2px\" d=\"M562,202.0 562,168.66666666666666 744.0,168.66666666666666 744.0,202.0\" fill=\"none\" stroke=\"currentColor\"/>\n",
       "    <text dy=\"1.25em\" style=\"font-size: 0.8em; letter-spacing: 1px\">\n",
       "        <textPath xlink:href=\"#arrow-544ddc59fbe34a109705cb1a22a9362b-0-4\" class=\"displacy-label\" startOffset=\"50%\" side=\"left\" fill=\"currentColor\" text-anchor=\"middle\">ARG2</textPath>\n",
       "    </text>\n",
       "    <path class=\"displacy-arrowhead\" d=\"M744.0,204.0 L748.0,196.0 740.0,196.0\" fill=\"currentColor\"/>\n",
       "</g>\n",
       "</svg></span>"
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "from graph import Graph # of mtool package, available at HIT-SCIR .venv\n",
    "\n",
    "def load_parsed_graph(formalism=\"dm\", domain=\"restaurants\", graph_id = 1) -> Graph:\n",
    "    # load a parsed graph\n",
    "    if formalism is \"syndep\":\n",
    "        parsed_graphs_dir=f\"{libert_dir}/analysis/spacy-syndep-parses\"\n",
    "        parsed_fn=f\"{parsed_graphs_dir}/{domain}-syndep.mrp\"\n",
    "    else:    \n",
    "        parsed_graphs_dir=f\"{libert_dir}/analysis/HIT-SCIR-parses\"\n",
    "        parsed_fn=f\"{parsed_graphs_dir}/{formalism}-{domain}-output.mrp\"\n",
    "\n",
    "    with open(parsed_fn) as fin:\n",
    "        lines = list(fin.readlines())\n",
    "    g = Graph.decode(json.loads(lines[graph_id]))\n",
    "    return g\n",
    "\n",
    "def view_parsed_graph(formalism=\"dm\", domain=\"restaurants\", graph_id = 1, method=\"displacy\", graph=None):\n",
    "    # load a parsed graph\n",
    "    if not graph:\n",
    "        graph = load_parsed_graph(formalism, domain, graph_id)\n",
    "    # visualize\n",
    "    if method == \"dot\":\n",
    "        # visalize using dot\n",
    "        dot_fn = \"dot_example.dot\"\n",
    "        graph.dot(open(dot_fn, \"w\"))    # write dot file\n",
    "        # see dot in jupyter\n",
    "        def view_dot(fn):\n",
    "            from graphviz import Source\n",
    "            return Source.from_file(fn)\n",
    "        return view_dot(dot_fn)\n",
    "    elif method==\"tikz\":\n",
    "        # visalize using tikz\n",
    "        tikz_fn = \"tikz_example.tex\"\n",
    "        graph.tikz(open(tikz_fn, \"w\"))    # write tikz latex file\n",
    "        # I can't show it in notebook meantime since %load_ext tikzmagic not working\n",
    "        return None\n",
    "    else:\n",
    "        graph.displacy(jupyter=True, options={\"compact\":True, \"distance\":100})\n",
    "\n",
    "# example usage\n",
    "view_parsed_graph(formalism=\"syndep\", domain=\"restaurants\", graph_id = 0, method=\"displacy\")\n",
    "view_parsed_graph(formalism=\"dm\", domain=\"restaurants\", graph_id = 0, method=\"displacy\")\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "g = load_parsed_graph()    # a working example"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "# !pip install git+git://github.com/mkrphys/ipython-tikzmagic.git"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Generate Syntactic Dependencies\n",
    "Use SpaCy to parse the reviews data. Output to conll format, then use `mtool` to convert to `.mrp` format.   \n",
    "\n",
    "(spacy is installed on the `.daan_venv` env)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Already downloaded a model for the 'en' language\n"
     ]
    },
    {
     "ename": "ValueError",
     "evalue": "[E001] No component 'parser' found in pipeline. Available names: ['conll_formatter']",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-6-4a7afc9090e5>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m     20\u001b[0m         \u001b[0mdoc\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mtoken\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mi\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mis_sent_start\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mFalse\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     21\u001b[0m     \u001b[0;32mreturn\u001b[0m \u001b[0mdoc\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 22\u001b[0;31m \u001b[0mnlp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0madd_pipe\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mset_no_sentence_segmentation\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mname\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m\"no_sentence_segmentation\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mbefore\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m\"parser\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     23\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     24\u001b[0m \u001b[0;31m# Assuming sentence is pre-tokenized and merged with spaces;\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/data/home/ayalklei/nlp-architect/.daan_venv/lib/python3.6/site-packages/spacy/language.py\u001b[0m in \u001b[0;36madd_pipe\u001b[0;34m(self, component, name, before, after, first, last)\u001b[0m\n\u001b[1;32m    357\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    358\u001b[0m             raise ValueError(\n\u001b[0;32m--> 359\u001b[0;31m                 \u001b[0mErrors\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mE001\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mformat\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mname\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mbefore\u001b[0m \u001b[0;32mor\u001b[0m \u001b[0mafter\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mopts\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpipe_names\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    360\u001b[0m             )\n\u001b[1;32m    361\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mENABLE_PIPELINE_ANALYSIS\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mValueError\u001b[0m: [E001] No component 'parser' found in pipeline. Available names: ['conll_formatter']"
     ]
    }
   ],
   "source": [
    "# Load and prepare spacy model for dependency parsing\n",
    "import spacy\n",
    "spacy_model=\"en_core_web_lg\"\n",
    "nlp = spacy.load(spacy_model, disable=[\"ner\", \"vectors\", \"textcat\"])\n",
    "\n",
    "# Add Conll formatter to end of spacy's pipe\n",
    "from spacy_conll import ConllFormatter\n",
    "conllformatter = ConllFormatter(nlp)\n",
    "nlp.add_pipe(conllformatter, last=True)\n",
    "\n",
    "# Prepend a SentenceSegmenter by newline to spacy's pipe\n",
    "def set_no_sentence_segmentation(doc):\n",
    "    \"\"\" don't split sentences at all. \"\"\"\n",
    "    for token in doc:\n",
    "        doc[token.i].is_sent_start = False\n",
    "    return doc\n",
    "nlp.add_pipe(set_no_sentence_segmentation, name=\"no_sentence_segmentation\", before=\"parser\")\n",
    "\n",
    "# Assuming sentence is pre-tokenized and merged with spaces; \n",
    "# so need to use a custom whitespace tokenizer.\n",
    "# source: https://spacy.io/usage/linguistic-features#custom-tokenizer-example\n",
    "from spacy.tokens import Doc\n",
    "class WhitespaceTokenizer(object):\n",
    "    def __init__(self, vocab):\n",
    "        self.vocab = vocab\n",
    "\n",
    "    def __call__(self, text):\n",
    "        words = text.split()\n",
    "        # All tokens 'own' a subsequent space character in this tokenizer\n",
    "        spaces = [True] * len(words)\n",
    "        return Doc(self.vocab, words=words, spaces=spaces)\n",
    "nlp.tokenizer = WhitespaceTokenizer(nlp.vocab)\n",
    "\n",
    "\n",
    "# Parse syntactic dependecnies with SpaCy\n",
    "def parse_syn_dep(domain: str = \"device\"):\n",
    "    # Load sentence from raw text files\n",
    "    raw_fn = f\"{libert_dir}/analysis/raw_sentences/{domain}.txt\"\n",
    "    with open(raw_fn) as fin:\n",
    "        # process all sentences in raw file with SpaCy's parser\n",
    "        docs = nlp.pipe(line.rstrip() for line in fin.readlines() if line.strip()) \n",
    "\n",
    "    # Get the CoNLL representation of each setence, seperate with newline\n",
    "    conll_str = \"\\n\".join([doc._.conll_str for doc in docs])\n",
    "    out_fn = f\"{libert_dir}/analysis/spacy-syndep-parses/{domain}-syndep.conll\"\n",
    "    with open(out_fn, \"w\") as fout:\n",
    "        fout.write(conll_str)\n",
    "\n",
    "for domain in [\"restaurants\", \"device\", \"laptops\"]:\n",
    "    parse_syn_dep(domain)\n",
    "# parse_syn_dep(\"device\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Convert conllu to mrp\n",
    "After parsing syntactic dependencies into conll-u format using SpaCy, use `mtool` to convert it into `.mrp` format. (`mtool` needed some fixes in the code reading conll format.) \n",
    "\n",
    "Execute this on fish-shell:\n",
    "\n",
    "```fish\n",
    "set domains restaurants laptops device\n",
    "set dir $libert_dir/analysis/spacy-syndep-parses\n",
    "for domain in $domains; mtool --read ud --write mrp $dir/$domain-syndep.conll > $dir/$domain-syndep.mrp; end\n",
    "```\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### UD syntactic dependencies using UDPipe \n",
    "We use `spacy-udpipe` as a spacy wrapper of the UDPipe model."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [],
   "source": [
    "# # Load and prepare spacy model for dependency parsing\n",
    "import spacy\n",
    "import spacy_udpipe\n",
    "# spacy_udpipe.download(\"en\") # download English model (in first run)\n",
    "nlp = spacy_udpipe.load(\"en\")\n",
    "\n",
    "\n",
    "# Add Conll formatter to end of spacy's pipe\n",
    "from spacy_conll import ConllFormatter\n",
    "conllformatter = ConllFormatter(nlp)\n",
    "nlp.add_pipe(conllformatter, last=True)\n",
    "\n",
    "\n",
    "# Parse syntactic dependecnies with SpaCy\n",
    "def parse_syn_dep(domain: str = \"device\"):\n",
    "    # Load sentence from raw text files\n",
    "    raw_fn = f\"{libert_dir}/analysis/raw_sentences/{domain}.txt\"\n",
    "    with open(raw_fn) as fin:\n",
    "        input = [line.strip().split() for line in fin.readlines() if line.strip()]\n",
    "    # process all sentences in raw file with SpaCy's parser\n",
    "    doc = nlp(input) \n",
    "\n",
    "    # Get the CoNLL representation of each setence, seperate with newline\n",
    "#     conll_str = \"\\n\".join([doc._.conll_str for doc in docs])\n",
    "    out_fn = f\"{libert_dir}/analysis/udpipe-syndep-parses/{domain}-syndep.conll\"\n",
    "    with open(out_fn, \"w\") as fout:\n",
    "        fout.write(doc._.conll_str)\n",
    "\n",
    "# for domain in [\"restaurants\", \"laptops\", \"device\"]:\n",
    "#     parse_syn_dep(domain)\n",
    "parse_syn_dep(\"laptops\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Convert conllu to mrp\n",
    "After parsing syntactic dependencies into conll-u format using SpaCy, use `mtool` to convert it into `.mrp` format. (`mtool` needed some fixes in the code reading conll format.) \n",
    "\n",
    "Execute this on fish-shell:\n",
    "\n",
    "```fish\n",
    "set domains restaurants laptops device\n",
    "set dir $libert_dir/analysis/udpipe-syndep-parses\n",
    "for domain in $domains; mtool --read ud --write mrp $dir/$domain-syndep.conll > $dir/$domain-syndep.mrp; end\n",
    "```"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": ".daan_venv",
   "language": "python",
   "name": ".daan_venv"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
